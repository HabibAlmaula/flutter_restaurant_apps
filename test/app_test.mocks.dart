// Mocks generated by Mockito 5.0.16 from annotations
// in flutter_restaurant/test/app_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:flutter_restaurant/data/db/database_helper.dart' as _i2;
import 'package:flutter_restaurant/data/models/detail_restaurant.dart' as _i4;
import 'package:flutter_restaurant/data/models/restaurant.dart' as _i3;
import 'package:flutter_restaurant/data/service/api_service.dart' as _i9;
import 'package:flutter_restaurant/provider/database_provider.dart' as _i5;
import 'package:flutter_restaurant/utils/loading.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabaseHelper_0 extends _i1.Fake implements _i2.DatabaseHelper {}

class _FakeRestaurants_1 extends _i1.Fake implements _i3.Restaurants {}

class _FakeDetailRestaurant_2 extends _i1.Fake implements _i4.DetailRestaurant {
}

/// A class which mocks [DatabaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseProvider extends _i1.Mock implements _i5.DatabaseProvider {
  MockDatabaseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get databaseHelper =>
      (super.noSuchMethod(Invocation.getter(#databaseHelper),
          returnValue: _FakeDatabaseHelper_0()) as _i2.DatabaseHelper);
  @override
  _i6.LoadingState get loadingState =>
      (super.noSuchMethod(Invocation.getter(#loadingState),
          returnValue: _i6.LoadingState.Loading) as _i6.LoadingState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  List<_i3.Restaurant> get restaurant =>
      (super.noSuchMethod(Invocation.getter(#restaurant),
          returnValue: <_i3.Restaurant>[]) as List<_i3.Restaurant>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void addFavourite(_i3.Restaurant? restaurant) =>
      super.noSuchMethod(Invocation.method(#addFavourite, [restaurant]),
          returnValueForMissingStub: null);
  @override
  void removeFavourite(String? id) =>
      super.noSuchMethod(Invocation.method(#removeFavourite, [id]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<bool> isFavourite(String? id) =>
      (super.noSuchMethod(Invocation.method(#isFavourite, [id]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i9.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.Restaurants> getListRestaurants() =>
      (super.noSuchMethod(Invocation.method(#getListRestaurants, []),
              returnValue: Future<_i3.Restaurants>.value(_FakeRestaurants_1()))
          as _i7.Future<_i3.Restaurants>);
  @override
  _i7.Future<_i4.DetailRestaurant> getDetailRestaurant(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailRestaurant, [id]),
              returnValue:
                  Future<_i4.DetailRestaurant>.value(_FakeDetailRestaurant_2()))
          as _i7.Future<_i4.DetailRestaurant>);
  @override
  _i7.Future<_i3.Restaurants> searchRestaurant(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchRestaurant, [query]),
              returnValue: Future<_i3.Restaurants>.value(_FakeRestaurants_1()))
          as _i7.Future<_i3.Restaurants>);
  @override
  String toString() => super.toString();
}
